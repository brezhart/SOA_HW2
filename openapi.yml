openapi: 3.0.0
info:
  title: Social Network API
  version: 1.0.0
  description: API for user management and posts

paths:
  /register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        200:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /login:
    post:
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        401:
          description: Invalid credentials

  /profile:
    get:
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
    
    put:
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized

  /posts:
    post:
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        201:
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        401:
          description: Unauthorized
        500:
          description: Internal server error
    
    get:
      summary: Get paginated list of posts
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
      responses:
        200:
          description: List of posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPosts'
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /posts/{post_id}:
    get:
      summary: Get a post by ID
      security:
        - bearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID of the post
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        401:
          description: Unauthorized
        403:
          description: Forbidden - no access to private post
        404:
          description: Post not found
        500:
          description: Internal server error
    
    put:
      summary: Update a post
      security:
        - bearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID of the post to update
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
      responses:
        200:
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        401:
          description: Unauthorized
        403:
          description: Forbidden - not the post creator
        404:
          description: Post not found
        500:
          description: Internal server error
    
    delete:
      summary: Delete a post
      security:
        - bearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID of the post to delete
          schema:
            type: integer
            minimum: 1
      responses:
        204:
          description: Post deleted successfully
        401:
          description: Unauthorized
        403:
          description: Forbidden - not the post creator
        404:
          description: Post not found
        500:
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserCreate:
      type: object
      properties:
        login:
          type: string
          minLength: 3
          maxLength: 50
        password:
          type: string
          minLength: 8
        email:
          type: string
          format: email
        first_name:
          type: string
          minLength: 2
          maxLength: 50
        last_name:
          type: string
          minLength: 2
          maxLength: 50
        birth_date:
          type: string
          format: date
        phone:
          type: string
          pattern: "^\\+?[1-9]\\d{1,14}$"
        avatar_url:
          type: string
      required:
        - login
        - password
        - email
        - first_name
        - last_name

    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
        first_name:
          type: string
          minLength: 2
          maxLength: 50
        last_name:
          type: string
          minLength: 2
          maxLength: 50
        birth_date:
          type: string
          format: date
        phone:
          type: string
          pattern: "^\\+?[1-9]\\d{1,14}$"
        avatar_url:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
        login:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        birth_date:
          type: string
          format: date
        phone:
          type: string
        avatar_url:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_active:
          type: boolean

    LoginRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password

    Token:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string

    PostCreate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        is_private:
          type: boolean
          default: false
        tags:
          type: array
          items:
            type: string
          default: []
      required:
        - title
        - description

    PostUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
        is_private:
          type: boolean
        tags:
          type: array
          items:
            type: string

    Post:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        creator_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        is_private:
          type: boolean
        tags:
          type: array
          items:
            type: string
      required:
        - id
        - title
        - description
        - creator_id
        - created_at
        - updated_at
        - is_private
        - tags

    PaginatedPosts:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        total_count:
          type: integer
        page:
          type: integer
        page_size:
          type: integer
        total_pages:
          type: integer
      required:
        - posts
        - total_count
        - page
        - page_size
        - total_pages
